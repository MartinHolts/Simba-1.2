{
=========
Debugging
=========
}

{*******************************************************************************
Procedure debugBitmap(Bmp: Integer);
By: Cazax
Description: Shows a bitmap in the debug image window.
*******************************************************************************}
procedure debugBitmap(Bmp: Integer);
var
  W, H: Integer;
begin
  try
    GetBitmapSize(Bmp, W, H);
    DisplayDebugImgWindow(W, H);
    DrawBitmapDebugImg(Bmp);
  except
    Writeln('Error in DebugBitmap');
  end;
end;

{*******************************************************************************
function debugTPA(Points: TPointArray; BmpName: string): Boolean;
By: Wizzup?
Description: Shows an image of the Debug screen, plotting colors over the points
stored in Points TPA. If a name is specified, an image will be saved to that path.
*******************************************************************************}
function debugTPA(Points: TPointArray; BmpName: string): Boolean;
var
  Bmp: integer;
  Box : TBox;
  TempTPA : TPointArray;
begin
  Box := GetTPABounds(Points);
  Bmp := BitmapFromClient(Box.x1,Box.y1,Box.x2,Box.y2);
  TempTPA := CopyTPA(Points);
  OffsetTPA(TempTPA,Point(-box.x1,-box.y1));
  DrawTPABitmap(Bmp,TempTPA,clRed);
  DisplayDebugImgWindow(box.x2-Box.x1 + 1, box.y2-box.y1 + 1);
  DrawBitmapDebugImg(Bmp);
  if bmpname <> '' then
    SaveBitmap(Bmp, ScriptPath + BmpName + '.bmp');
  FreeBitmap(Bmp);
  Result := True;
end;

{*******************************************************************************
function debugATPA(aPoints: array of TPointArray; BmpName: string): Boolean;
By: Wizzup
Description: Shows an image of the client, plotting each TPA of the 2D point
             array aPoints. Each TPA is a different color. If a name is
             specified, an image will be saved.
*******************************************************************************}
function debugATPA(aPoints: T2DPointArray; BmpName: string): Boolean;
var
   Width, Height, ClientBMP: Integer;
   ATPA : T2DPointArray;
   Box : TBox;
begin
  result := false;
  if length(aPoints) = 0 then
    exit;
  Box    := GetATPABounds(aPoints);
  Width  := box.x2 - box.x1 + 1;
  Height := box.y2 - box.y1 + 1;
  DisplayDebugImgWindow(Width, Height);
  ClientBMP := BitmapFromClient(box.x1,box.y1,box.x2,box.y2);
  ATPA := CopyATPA(aPoints);
  OffsetATPA(ATPA,point(-box.x1,-box.y1));
  DrawATPABitmap(ClientBMP,ATPA);
  DrawBitmapDebugImg(ClientBMP);
  if BmpName <> '' then
    SaveBitmap(ClientBMP, ScriptPath + BmpName + '.bmp');
  FreeBitmap(ClientBMP);
  Result := True;
end;

{*******************************************************************************
procedure debugATPABounds(aPoints: Array Of TPointArray);
By: Wizzup?, lordsaturn, & caused
Description: Shows an image of the client, plotting each TPA's bounds as a box
             of different colour per TPA. If a name is specified, an image
             will be saved.
*******************************************************************************}
procedure debugATPABounds(aPoints: array Of TPointArray);
var
  Width, Height, ClientBMP, I: Integer;
  B, Box: TBox;
  BoxColors : TIntegerArray;
  SelColor: Integer;
  x,y : integer;
  BMP : Integer;
begin
  Box := GetATPABounds(aPoints);
  Width := Box.X2 + 5;
  Height := Box.Y2 + 5;
  DisplayDebugImgWindow(Width, Height);
  BoxColors := [clRed, clBlue, clBlack, clGreen, clYellow];
  ClientBMP := BitmapFromClient(0,0,width-1,height-1);
  for i:= 0 to high(aPoints) do
  begin
    SelColor := BoxColors[Random(length(Boxcolors))];

    B := getTPABounds(aPoints[i]);
    for x := B.x1 to B.x2 do
    begin
      FastSetPixel(ClientBMP, x, b.y1, selColor);
      FastSetPixel(ClientBMP, x, B.y2, selColor);
    end;
    for y := B.y1 to B.y2 do
    begin
      FastSetPixel(ClientBMP, B.x1, y, selColor);
      FastSetPixel(ClientBMP, B.x2, y, selColor);
    end;

    BMP := BitmapFromText(inttostr(i),StatChars);
    FastReplaceColor(bmp,clblack,clyellow);
    FastReplaceColor(bmp,clwhite,clblack);
    SetTransparentColor(bmp,clYellow);
    FastDrawTransparent(B.x1 + 2, b.y1 + 2, bmp,clientbmp);
    FreeBitmap(BMP);
  end;
  DrawBitmapDebugImg(clientBMP);
  FreeBitmap(ClientBmp);
end;

procedure debugBoxes(Boxes: Array of TBox);
var
  i    : Integer;
  atpa : T2DPointArray;
begin
  setLength(atpa, length(Boxes));
  for i:=0 to high(Boxes) do
    atpa[i] := TPAFromBox(Boxes[i]);
  debugATPABounds(atpa);
end;

Const
  WT_INTERNAL = 0;
  WT_CORE     = 1;
  WT_SCRIPT   = 2;
  WT_RANDOM   = 3;

procedure warn(Message: String; WarnType: Integer=WT_SCRIPT);
var
  s : String;
begin
  case WarnType of
    WT_INTERNAL : s := 'INTERNAL';
    WT_CORE     : s := 'AL';
    WT_SCRIPT   : s := 'SCRIPT';
    WT_RANDOM   : s := 'RANDOM';
  end;
  Writeln('['+s+'] '+Message);
end;

procedure AL_InitMessage(_valM, _valS: extended);
begin
  Writeln('[=================================]');
  Writeln('|        < Aero|Library >         |');
  Writeln('|        ----------------         |');
  WriteLn('|' + centerStringEx('Version  : '+toStr(_valM), 33, ' ') + '|');
  WriteLn('|' + centerStringEx('Revision : '+toStr(_valS), 33, ' ') + '|');
  Writeln('[=================================]');
end;

(*
TakeScreen
~~~~~~~~~~

.. code-block:: pascal

    procedure takeScreen(Reason: string; Path: string);

.. note::

    by Mutant, Squirrle, Yakman, & Harry
    Last Modified: Dec. 5th, 2013 by Flight

Example:

.. code-block:: pascal

  takeScreen('Prison Pete');
    or
  takeScreen('Prison Pete', AL_INCPATH + 'screenshots/antirandoms/');

*)
procedure takeScreen(Reason: string; Path: string = AL_INCPATH+'/screenshots/');
begin
  if (not directoryExists(Path)) then
    forceDirectories(Path);

  try
    saveScreenshot(Path + Reason + ' ' + Me.Name + ' ' + theDate(Date_Day) + '.png');
    warn('Screenshot of: ' + reason + ' ' + TimeRunning, WT_INTERNAL);
  except
    warn('Failed to save screenshot of: ' + reason, WT_INTERNAL);
  end;
end;

// Base design by Hoodz
procedure liveColorDebug(var outBox: TBox; Loc: TPoint=point(30,355));
var
  mX, mY, color,
  BMP: Integer;
  border_TPA, small_TPA: TPointArray;
  debugBox, smallBox: TBox;
begin
  if isMouseInClient() then
  begin
    getRealMousePos(mX, mY);
    color := getColor(mX, mY);
    if not isMouseInClient()  then
      exit;
    bmp := bitmapFromClient(mX - 2, mY - 2, mX + 2, mY + 2);
    stretchBitmapResize(BMP, 100, 100);
    debugBox := toBox(0, 0, 99, 99);
    border_TPA := TPAFromBox(debugBox);
    border_TPA := findTPAEdges(border_TPA);
    smallBox := toBox(39, 39, 59, 59);
    small_TPA := TPAFromBox(smallBox);
    small_TPA := findTPAEdges(small_TPA);
    drawTPABitmap(BMP, small_TPA, clGreen);
    drawTPABitmap(BMP, border_TPA, clGreen);
    fastReplaceColor(BMP, 0, 1);
    {$IFDEF SMART}
      OS_SMART.__Graphics.DrawBitmap(BMP, Loc);
    {$ELSE}
      fastDrawTransparent(Loc.X, Loc.Y, BMP, LayerBMP.GetIndex);
    {$ENDIF}
    freeBitmap(BMP);
  end;

  outBox := toBox(Loc.X, Loc.Y, Loc.X+99, Loc.Y+99);
end;

procedure defineBox(out Box:TBox);
var
  tmpBox : TBox;
  T      : Timer;
  P,P2   : TPoint;
begin
  {$IFDEF SMART}
    OS_SMART.__Graphics.Clear();
  {$ELSE}
    LayerBMP.clearGraphics();
  {$ENDIF}

  showMessage('Hover your mouse at the top-left corner for 2 seconds');
  wait(500);
  T.start();
  repeat
    if isMouseInClient() then
    begin
      P := getRealMousePnt();
      wait(20);
      if not pointsMatch(getRealMousePnt(), P) then
        T.start();

      {$IFDEF SMART}
        OS_SMART.__Graphics.Clear();
        OS_SMART.__Graphics.DrawClippedText('('+toStr(P.X)+', '+toStr(P.Y)+')', 'SmallChars07', P, clWhite);
      {$ELSE}
        LayerBMP.clearGraphics();
        LayerBMP.DrawText('('+toStr(P.X)+', '+toStr(P.Y)+')', 'SmallChars07', P, True, clWhite);
      {$ENDIF}
    end;
  until((T.timeElapsed > 2000));

  {$IFDEF SMART}
    OS_SMART.__Graphics.Clear();
  {$ELSE}
    LayerBMP.clearGraphics();
  {$ENDIF}

  if isMouseInClient() then
    P := getRealMousePnt();

  showMessage('Hover your mouse at the bottom-right corner for 2 seconds');
  wait(500);
  T.start();
  repeat
    if isMouseInClient() then
    begin
      P2 := getRealMousePnt();
      wait(20);
      if not pointsMatch(getRealMousePnt(), P2) then
        T.start();
      {$IFDEF SMART}
        OS_SMART.__Graphics.Clear();
        if (P2.X > P.X) and (P2.Y > P.Y) then
        begin
          tmpBox := toBox(P.X, P.Y, P2.X, P2.Y);
          OS_SMART.__Graphics.DrawBox(tmpBox);
          OS_SMART.__Graphics.DrawClippedText('('+toStr(P2.X)+', '+toStr(P2.Y)+')', 'SmallChars07', P2, clWhite);
        end;
      {$ELSE}
        LayerBMP.clearGraphics();
        if (P2.X > P.X) and (P2.Y > P.Y) then
        begin
          tmpBox := toBox(P.X, P.Y, P2.X, P2.Y);
          LayerBMP.DrawBox(tmpBox);
          LayerBMP.DrawText('('+toStr(P2.X)+', '+toStr(P2.Y)+')', 'SmallChars07', P2, True, clWhite);
        end;
      {$ENDIF}
    end;
  until((T.timeElapsed > 2000));

  Box := tmpBox;

  {$IFDEF SMART}
    OS_SMART.__Graphics.Clear();
  {$ELSE}
    LayerBMP.clearGraphics();
  {$ENDIF}
end;
