{
=============
EntityHandler
=============
}

Procedure TEntity.define(PntT, PntB: TPoint; colTol:Integer=20);
var
  i     : Integer;
  pC    : TColEx;
  tTPA  : TPointArray;
  pCols : TIntegerArray;
begin
  pC.create(getColor(PntT.X,PntT.Y), colTol);
  pC.findAllIn(toBox(PntT.X-15,PntT.Y-20,PntT.X+15,PntT.Y+25), tTPA);
  getColorsWrap(tTPA, pCols);
  clearSameIntegers(pCols);

  for i:=0 to high(pCols) do
    if not similarColors(pC.Col, pCols[i], colTol) then
      removeIntArrIndex(i, pCols);

  Self.TopCol.autoCreate(pCols);

  tTPA  := [];
  pCols := [];

  pC.create(getColor(PntB.X,PntB.Y), colTol);
  pC.findAllIn(toBox(PntB.X-15,PntB.Y-20,PntB.X+15,PntB.Y+25), tTPA);
  getColorsWrap(tTPA, pCols);
  clearSameIntegers(pCols);

  for i:=0 to high(pCols) do
    if not similarColors(pC.Col, pCols[i], colTol) then
      removeIntArrIndex(i, pCols);

  Self.BottomCol.autoCreate(pCols);
  Self.BasePnt := Point(round((PntT.X+PntB.X)/2), round((PntT.Y+PntB.Y)/2));
end;

function isPlayerWalking(): Boolean; forward;
Procedure TEntity.update();
var
  pPnt      : TPoint;
  tTPA,
  bTPA,fTPA : TPointArray;
  atpa      : T2DPointArray;
begin
  while isPlayerWalking() do
    Wait(50);

  self.FullTPA := [];
  pPnt := self.BasePnt;

  Self.TopCol.findAllIn(toBox(pPnt.X-20,pPnt.Y-40,pPnt.X+20,pPnt.Y+40), tTPA);
  Self.BottomCol.findAllIn(toBox(pPnt.X-20,pPnt.Y-40,pPnt.X+20,pPnt.Y+40), bTPA);

  combineTPAWrap(tTPA, bTPA, fTPA);
  if (length(fTPA) < 1) then
  begin
    writeln('[TEntity]: Colors not found...');
    Exit;
  end;

  atpa := clusterTPA(fTPA, 10);
  sortATPAFromMidPoint(atpa, fTPA.midPnt());
  self.FullTPA := atpa[0];
  self.BasePnt := self.FullTPA.midPnt();

  if (distance(self.BasePnt.X, self.BasePnt.Y, MSCX, MSCY) > 75) then
  begin
    sortATPAFromMidPoint(atpa, Point(MSCX,MSCY));
    self.FullTPA := atpa[0];
    self.BasePnt := self.FullTPA.midPnt();
  end;

  self.Bounds := self.FullTPA.getBounds();
end;

Procedure TEntity.liveDebug(WaitTime: Integer; Color:Integer=clWhite);
begin
  {$IFDEF SMART}
    repeat
      Self.update();
      OS_SMART.__Graphics.clearArea(AREA_MS);
      OS_SMART.__Graphics.DrawBox(Self.Bounds, False, Color);

      OS_SMART.__Graphics.DrawTPA(Self.FullTPA, Color, False);
      OS_SMART.__Graphics.DrawClippedText('Count: '+toStr(length(Self.FullTPA)), 'SmallChars07', point(8,307), Color);
      OS_SMART.__Graphics.DrawClippedText('Shift: '+toStr(getTPAShiftPercent(Me.Model.FullTPA, WaitTime))+'%', 'SmallChars07', point(8,321), Color);
    until(false);
  {$ELSE}
    repeat
      Self.update();
      LayerBMP.clearArea(AREA_MS);
      LayerBMP.DrawBox(Self.Bounds, Color);

      LayerBMP.DrawTPA(Self.FullTPA, Color);
      LayerBMP.DrawText('Count: '+toStr(length(Self.FullTPA)), 'SmallChars07', point(8,307), True, Color);
      LayerBMP.DrawText('Shift: '+toStr(getTPAShiftPercent(Me.Model.FullTPA, WaitTime))+'%', 'SmallChars07', point(8,321), True, Color);
    until(false);
  {$ENDIF}
end;
