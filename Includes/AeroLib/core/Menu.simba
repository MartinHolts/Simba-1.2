{
====
Menu
====
}

function isLoggedIn(): Boolean; forward;

function menuOpen(): Boolean;
var
  tmpCol : TColEx;
begin
  if not isLoggedIn() then Exit;
  tmpCol.create(4674653,0);
  result := (tmpCol.count(toBox(4,4,760,501)) >= 100);
end;

function getOptions(): Array of TOptions;
var
  B,BB,BigBox,Yoff,
  TextSearchBox    : TBox;
  boxCol,txtCol,
  bCol             : TColEx;
  i,w,h,bmp,target : Integer;
  TPA,TPA1         : TPointArray;
  ATPA,tempatpa    : T2DPointArray;
begin
  target := getImageTarget();
  getClientDimensions(B.X2, B.Y2);
  boxCol.create(4674653,0);

  B := toBox(4, 4, B.X2 - 1, B.Y2 - 1);
  boxCol.findAllIn(B, TPA);
  if (length(TPA) < 100) then
    Exit;

  B := TPA.getBounds();
  BigBox := B;
  Yoff := toBox(B.X1, B.Y1 + 18, B.X2, B.Y2);
  bCol.create(0,0);
  bCol.findAllIn(Yoff, TPA1);

  ATPA := clusterTPA(TPA1, 1);
  sortATPASize(ATPA, true);
  if Length(ATPA) > 0 then
    TextSearchBox := ATPA[0].getBounds();

  combineTPAWrap(TPA, TPA1, TPA);
  if (length(TPA) < 10) then
    Exit;

  TPA1 := TPAFromBox(TextSearchBox);
  clearTPAFromTPAWrap(TPA1, TPA, TPA1);

  bmp := createBitmap(TextSearchBox.X2 - TextSearchBox.X1 + 1, TextSearchBox.Y2 - TextSearchBox.Y1 + 1);
  offSetTPA(TPA1, Point(-TextSearchBox.X1, -TextSearchBox.Y1));

  drawTPABitmap(bmp, TPA1, clRed);
  getbitmapSize(bmp, w, h);
  setTargetBitmap(bmp);

  SetLength(ATPA, h div 15);
  txtCol.create(clRed,0);
  for i:=0 to High(ATPA) do
    txtCol.findAllIn(toBox(0,2+(i*15),w-1,15+(i*15)), ATPA[i]);

  sortATPAFromFirstPointY(ATPA, Point(w div 2, 0));
  setArrayLength(Result, Length(ATPA));
  if Length(Result) > 0 then
  Result[0].BigBox := BigBox;
  for i:=0 to high(ATPA) do
  begin
    TPA := ATPA[i];
    tempatpa := clusterTPAEx(TPA, 1, 10);
    sortATPAFromFirstPointX(tempatpa, Point(0, 0));
    Result[i].Str := getTextATPA(tempatpa, 5, 'UpChars07');
    BB := ATPA[i].getBounds();
    Result[i].Bounds := toBox(BB.X1 + Yoff.X1, BB.Y1 + Yoff.Y1,
                Result[0].BigBox.X2, BB.Y2 + Yoff.Y1);
    setlength(tempatpa,0);
    setlength(TPA,0);
  end;
  setImageTarget(target);
  freeBitmap(bmp);
end;

function exitMenu(): Boolean;
var
  T      : Timer;
  x,y,ms : Integer;
begin
  result := false;
  ms := MouseSpeed;
  MouseSpeed := randomRange(25,30);
  T.start();
  while (T.timeElapsed() < 3000) do
  begin
    getMousePos(X, Y);
    missMouse(Point(x,y-10), 0, 0);
    if not menuOpen() then
      break;
  end;
  MouseSpeed := ms;
  result := not menuOpen();
end;

function optionExistsMulti(Texts: TStringArray): Boolean;
var
  i : Integer;
  Options : array of TOptions;
begin
  result  := False;
  Options := getOptions();
  if (length(Options) < 1) then
    exit(False);

  for i:=0 to high(Options) do
    if arrInStr(Texts, Options[i].Str) then
      exit(true);
end;

function optionExists(Text: String): Boolean;
var
  i : Integer;
  Options : array of TOptions;
begin
  result  := False;
  Options := getOptions();
  if (length(Options) < 1) then
    exit(False);

  for i:=0 to high(Options) do
    if arrInStr([Text], Options[i].Str) then
      exit(true);
end;

function chooseOptionMulti(Texts: TStringArray): Boolean;
var
  B,B2    : TBox;
  Pnt     : TPoint;
  i,R,x2,
  y2,h    : Integer;
  canMiss : Boolean;
  Options : Array of TOptions;
begin
  Options := getOptions();
  if (length(Options) < 1) then
    exit(False);
  canMiss := length(Options) > 2;

  try
    for i:=0 to high(Options) do
    begin
      if arrInStr(Texts, Options[i].Str) then
      begin
        B := Options[i].Bounds;
        getMousePos(x2, y2);
        R := min(((B.X2 - B.X1) shr 1), 5);
        if not pointInBox(Point(x2,y2), B) then
        begin
          if canMiss then
            canMiss := RBoolEx(3);  // 25% chance
          if not canMiss then
            mouseBox(B.x1+R, B.Y1, B.x2-R, B.Y1+5, R, MOUSE_LEFT)
          else
          begin
            if ((not (Options[i].Str = Options[high(Options)].Str)) and (not (RBoolEx(3)))) then // There's an option below the target +75% chance
              h  := i+1  // Option below our target option
            else
              h  := i-1; // Option above our target option

            if inRange(h, 0, high(Options)) then
            begin
              B2 := Options[h].Bounds;
              gaussBox(Pnt.x, Pnt.y, B2.X1, B2.Y1, B2.X2, B2.Y2);
              if inRange(Pnt.x, 1, 9999) and inRange(Pnt.y, 1, 9999) then // Valid point
              begin
                missMouse(Pnt, 0, 0);
                wait(randomRange(100,150));
              end;
            end;
            mouseBox(B.x1+R, B.Y1, B.x2-R, B.Y1+5, R, MOUSE_LEFT);
          end;
        end else
          fastClick(MOUSE_LEFT);

        exit(True);
      end;
    end;
  except
    warn('Error in chooseOptionMulti', WT_CORE);
  end;

  exitMenu;
end;

function chooseOption(Txt: String): Boolean;
begin
  Result := chooseOptionMulti([Txt]);
end;

function waitOptionExistsMulti(S: TStringArray; Time: Integer): Boolean;
var
  T : Timer;
begin
  Result := False;
  T.start();
  while (T.timeElapsed() < Time) do
  begin
    if optionExistsMulti(S) then
      Exit(True);
    Wait(20 + Random(10));
  end;
end;

function waitOptionMulti(S: TStringArray; Time: Integer): Boolean;
var
  T : Timer;
begin
  Result := False;
  T.start();
  while (T.timeElapsed() < Time) do
  begin
    if chooseOptionMulti(S) then
      Exit(True);
    Wait(20 + Random(10));
  end;
end;

function waitOption(S: string; Time: Integer): Boolean;
begin
  Result := waitOptionMulti([S], Time);
end;
