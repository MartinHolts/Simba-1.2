(*
Minimap to Mainscreen
=====================
The core for our minimap to mainscreen projection.
Supports rotation, and zoom, and resizable client.

MM2MS extends the Minimap interface as well as the mainscreen interface with 
functionality to convert coordinates to & from the minimap to the mainscreen.
*)

(*
MM2MS
-----
*)

(*
type TMinimapToMS
~~~~~~~~~~~~~~~~~
.. pascal:: 
  type
    TMinimapToMS = record
      BASE_W, BASE_H: Int32;        // the size of the area we project to (mainscreen size)
      MSCX, MSCY: Int32;            // the center of the area we project to (mainscreen center)
      MMCX, MMCY: Int32;            // the center of the area we project from (minimap center)
      SCALE_MIN, SCALE_MAX: Double; // direct zoom (relates to BASE)
      ZOOM: Double;                 // current zoom
      YSHIFT: Double;               // zooming may cause mid-Y to shift
    end;
   
The comments explains it. This is the datastructure MM2MS uses.
*)
type
  TMinimapToMS = record
    BASE_W, BASE_H: Int32;        // the size of the area we project to (mainscreen size)
    MSCX, MSCY: Int32;            // the center of the area we project to (mainscreen center)
    MMCX, MMCY: Int32;            // the center of the area we project from (minimap center)
    SCALE_MIN, SCALE_MAX: Double; // direct zoom (relates to BASE)
    ZOOM: Double;                 // current zoom
    YSHIFT: Double;               // zooming may cause mid-Y to shift
  end;


(*
var MM2MS
~~~~~~~~~
.. pascal::
  var MM2MS: TMinimapToMS;

The global variable which you would refer to.
*)
var
  MM2MS: TMinimapToMS;


(*
MM2MS.Init
~~~~~~~~~~
.. pascal:: procedure TMinimapToMS.Init(Resizable: Boolean);

This method is called automatically once SRL loads. So you don't have to deal with it.

This methods Init's the MM2MS variable, sets up values needed for a succesful projection.
MM2MS supports Resizable RS client, but SRL does not. This is added only for future-proofing.
*)
procedure TMinimapToMS.Init(Resizable: Boolean);
var
  B: TBox;
begin
  if not Resizable then
  begin
    Self := [
      513, 335,     // ms size
      259, 172,     // ms center
      642, 84,      // mm center
      0.47, 3.5,    // scale min, scale max
      0.0,          // current zoom
      12            // zoom Y offset (imperfect)
    ];
  end else
  begin
    B := GetClientBounds();
    Self := [
      513, 335,
      B.Middle.X, B.Middle.Y,
      B.X2 - 81, B.Y1 + 84,    //this may needs tweaking if the minimap moves
      1.08 * B.Height / 503, 4.4 * B.Height / 503,
      0.0,
      24
    ];
  end;
end;


(*
MM2MS.Transform
~~~~~~~~~~~~~~~
.. pascal:: function TMinimapToMS.Transform(coord: Vector3; matrix: TMatrix4): Vector3;

Transforms the given coordinate with the given transformation matrix ``matrix``
*)
function TMinimapToMS.Transform(coord: Vector3; matrix: TMatrix4): Vector3;
var
  p: Vector3;
  scale: Double;
begin
  scale := SCALE_MIN + ZOOM * (SCALE_MAX-SCALE_MIN);
  p := Vector3.TransformCoordinate(coord, matrix);
  Result.x := (+p.X * BASE_W * scale) + MSCX;
  Result.y := (-p.Y * BASE_H * scale) + MSCY + (zoom*YSHIFT);
end;

(*
MM2MS.Project
~~~~~~~~~~~~~
.. pascal:: function TMinimapToMS.Project(Coords: Vector3Array; Rotation: Vector3): TPointArray;

Projects the given coordinates ``coords`` and applys the given ``Rotation`` vector to the projection.
*)
function TMinimapToMS.Project(Coords: Vector3Array; Rotation: Vector3): TPointArray;
var
  vec: Vector3;
  viewMatrix, projMatrix, worldMatrix,transMatrix: TMatrix4;
begin           //low angle test  [0,-28.5,13]
  viewMatrix := TMatrix4.LookAtRH([0,-21,  53], [0,0,1.3], Vector3_UnitY);
  projMatrix := TMatrix4.PerspectiveFovRH(Sqrt(2), 765/503, 0.01, 1.0);

  worldMatrix := TMatrix4.RotationYawPitchRoll(Rotation.Y, Rotation.X, Rotation.Z) * Matrix_Identity;
  transMatrix := worldMatrix * viewMatrix * projMatrix;
  for vec in Coords do
  begin
    vec := Transform(vec, transMatrix);
    Result += Point(Round(vec.x),Round(vec.y));
  end;
end;

(*
MM2MS.Run
~~~~~~~~~
.. pascal:: function TMinimapToMS.Run(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray;

The method we actually call (internally) to project our coordinates from the minimap to the mainscreen.
*)
function TMinimapToMS.Run(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray;
var
  i: Int32;
begin
  for i:=0 to High(Arr) do
    Arr[i] := [Arr[i].x - MMCX, (MMCY - Arr[i].y), Arr[i].z];
  
  Result := Project(Arr, Vec3(0, 0, PI*2 - Roll));
end;

(*
MM2MS.SetZoom
~~~~~~~~~~~~~
.. pascal:: procedure TMinimapToMS.SetZoom(Notch: ERSZoomNotch);

Changes the zoom level MM2MS operates at.

.. pascal::
  MM2MS.SetZoom(Options.GetZoomNotch());

*)
procedure TMinimapToMS.SetZoom(Notch: ERSZoomNotch);
begin
  if (Notch = ZOOM_NOTCH_UNKNOWN) then
    srl.WriteLn('MM2MS only works at a fixed zoom notch!', dtFatal);

  case Notch of
    ZOOM_NOTCH_0:   Self.ZOOM := 0.000;
    ZOOM_NOTCH_25:  Self.ZOOM := 0.075;
    ZOOM_NOTCH_50:  Self.ZOOM := 0.275;
    ZOOM_NOTCH_75:  Self.ZOOM := 0.555;
    ZOOM_NOTCH_100: Self.ZOOM := 1.000;
  end;
end;


{$IFNDEF CODEINSIGHT}
begin
  MM2MS.Init(False);
  MM2MS.SetZoom(ZOOM_NOTCH_DEFAULT);
end;
{$ENDIF}


(*
Minimap
------------------------------------------------------
Extend the minimap-functionality with MM2MS functions
*)

(*
Minimap.ArrToMs
~~~~~~~~~~~~~~~
.. pascal:: 
  function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
  function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;

Takes array of points on the minimap, returns mainscreen projected array of points.
The first method takes a vector3 array as input, so we can pass height as well, and more detailed coordinates to scale.
*)
function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
var
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  for i:=0 to High(Arr) do
    Arr[i] := Arr[i].RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  
  Result := MM2MS.Run(Arr, Roll);
end;

function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;
var
  VecArr: Vector3Array;
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  
  SetLength(VecArr, Length(Arr));
  for i:=0 to High(Arr) do
  begin
    VecArr[i].x := Arr[i].x;
    VecArr[i].y := Arr[i].y;
    VecArr[i] := VecArr[i].RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  end;
  Result := MM2MS.Run(VecArr, Roll);
end;

(*
Minimap.VecToMs
~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  
  Result := MM2MS.Run([Vec], Roll)[0];
end;

(*
Minimap.PointToMs
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a TPoint on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));
  
  Result := MM2MS.Run([Vec3(PT.x, PT.y)], Roll)[0];
end;


(*
Minimap.VecToMsRect
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMsRect(Vec: Vector3; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a rectangle / tile on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMsRect(Vec: Vector3; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);

  Arr := MM2MS.Run([Vec3(Vec.x-2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y+2, Vec.z), Vec3(Vec.x-2, Vec.y+2, Vec.z)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.PointToMsRect
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a TPoint on the minimap, and converts it to a rectangle / tile on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));
  
  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.VecToMsBox
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMsBox(Vec: Vector3; Roll:Single=$FFFF): TBox;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a rough box on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMsBox(Vec: Vector3; Roll:Single=$FFFF): TBox;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);

  Arr := MM2MS.Run([Vec3(Vec.x-2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y+2, Vec.z), Vec3(Vec.x-2, Vec.y+2, Vec.z)], Roll);
  Result := GetTPABounds(arr);
end;

(*
Minimap.VecToMsBox
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMsBox(PT: TPoint; Roll:Single=$FFFF): TBox;

Takes a single coordinate as a TPoint on the minimap, and converts it to a rough box on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMsBox(PT: TPoint; Roll:Single=$FFFF): TBox;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  PT := PT.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));

  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := GetTPABounds(arr);
end;

(*
Minimap.StaticToMsRect
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; Height:Int32=0): TRectangle;

Takes static minimap coordinate, rotates it to compass angle, and returns a rectangle on the mainscreen
The static point is therefor gathered at north, and it will rotate it as expected.
*)
function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; Height:Int32=0): TRectangle;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(angle, Point(MM2MS.MMCX, MM2MS.MMCY)) do
    Result := Minimap.VecToMSRect(Vec3(X,Y, Height), angle);
end;

(*
Minimap.StaticToMs
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;

This is the same as the above, only that it returns a single point on the mainscreen.
*)
function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(angle, Point(MM2MS.MMCX, MM2MS.MMCY)) do
    Result := Minimap.VecToMS(Vec3(X,Y, Height), angle);
end;



(*
Mainscreen
-------------------------------------------------------
Extend the mainscreen-functionality with MS2MM function
*)

(*
Mainscreen.PointToMM
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3;

Takes a mainscreen point and converts it to a point on the minimap.

Returns a Vector3 which includes input height. Conversion to a TPoint if that's what you need is simply 
done by calling `.ToPoint` on the result.

**Example**

.. pascal::
  WriteLn Mainscreen.PointToMM(Point(250,140), 2);           // as a vector (more accurate)
  WriteLn Mainscreen.PointToMM(Point(250,140), 2).ToPoint(); // as a TPoint (lost accuracy)
*)
function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3;
var
  a: Double := Minimap.GetCompassAngle(False);

  function FindNearest(Area, Step: Double; FromMM: Vector3; IsFinal: Boolean): Vector3;
  var
    i,c: Int32;
    TPA: TPointArray;
    arr,raw: Vector3Array;
    best: TPoint;
    x,y: Double;
  begin
    best := Point(-9999, -9999);
    x := FromMM.X-Area;
    while x <= FromMM.X+Area do
    begin
      y := FromMM.Y-Area;
      while y <= FromMM.Y+Area do
      begin
        raw += Vector3([x,y,height]);
        arr += raw[High(raw)].RotateXY(-a, MM2MS.MMCX, MM2MS.MMCY);
        y += Step;
      end;
      x += Step;
    end;

    TPA := Minimap.ArrToMs(Copy(arr), a);
    if not IsFinal then Swap(arr, raw);
    for i:=0 to High(TPA) do
      if Distance(TPA[i], MS) < Distance(best, MS) then
      begin
        best := TPA[i];
        Result := arr[i];
      end;
    Result.z := Height;
  end;

var
  area: Double;
begin
  area := 48;
  Result := FindNearest(area, area, Vec3(MM2MS.MMCX, MM2MS.MMCY), False);
  while area > accuracy do
  begin
    Result := FindNearest(area, area, Result, False);
    area /= 2;
  end;
  Result := FindNearest(area, accuracy, Result, True);
end;
