(*
Options
=======
The options file holds functions and procedures that are used for configuring runescape.

Keep in mind that the option-tab changes qute frequently in OSRS, so over time it's more likely
to get outdated.
*)

(*
type TRSOptions
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape options interface.
*)   
type 
  TRSOptions = record(TInterfaceBase)
    FTabs: TBoxArray;
  end;

{==| Table of Contents |=======================
 procedure TRSOptions.__setup();
 function TRSOptions.Open(): Boolean;
 function TRSOptions.IsOpen(): Boolean;
 function TRSOptions.GetCurrentTab(): EOptionsTab;
 function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
 function TRSOptions.GetBrightness(): Int32;
 function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
}

(*
var Options
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape options interface.
*)
var 
  Options: TRSOptions;


(*
type EOptionsTab
~~~~~~~~~~~~~~~~
A type that covers the internal tabs in TRSOptions: ``EOptionsTab = (optDisplay, optAudio, optChat, optControls)``
*)
type
  EOptionsTab = (optDisplay, optAudio, optChat, optControls);

  
{$IFNDEF CODEINSIGHT}
procedure TRSOptions.__setup();
begin
  self.FBounds := [550,206,733,464];
  
  with Self do
  begin
    FName := 'Options';
    FStatic := True;
  end;

  //the four tabs (Display, Audio, Chat, Controls)
  SetLength(Self.FTabs, 4);
  Self.FTabs[0] := [553,206,592,245];
  Self.FTabs[1] := [599,206,638,245];
  Self.FTabs[2] := [645,206,684,245];
  Self.FTabs[3] := [691,206,730,245];
end;
{$ENDIF}

(*
Options.Open
~~~~~~~~~~~~~
.. pascal:: function TRSOptions.Open(): Boolean;

Opens the interface
*)
function TRSOptions.Open(): Boolean;
begin
  Result := Gametabs.Open(tabOptions);
end;

(*
Options.IsOpen
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabOptions, maxWait);
end;


//helper: Changes tab, and toggles the given button returns True if it didn't fail
function TRSOptions.__toggleButton(button:TBox; tab:EOptionsTab; enable:Boolean; tryTime:Int32): Boolean;
var enabled:Boolean;
begin
  if not(self.SetCurrentTab(tab)) then
    Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetCurrentTab(): EOptionsTab;

Returns which tab is currently active.
*)
function TRSOptions.GetCurrentTab(): EOptionsTab;
var i:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(FTabs) do
    if GtButton(FTabs[i]).IsEnabled() then
      Exit(EOptionsTab(i));
end;

(*
Options.SetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetCurrentTab(Tab: EOptionsTab; tryTime:Int32=2000): Boolean;

Sets the current tab to the given ``Tab``
*)
function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  wasOpen:Boolean;
begin
  wasOpen := self.IsOpen();
  if not(self.Open()) then 
    Exit();
  if not(wasOpen) then
    Wait(20,300);

  if Self.GetCurrentTab() = tab then Exit(True);

  Mouse.Click(Self.FTabs[Ord(tab)], mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    if GtButton(FTabs[Ord(tab)]).IsEnabled() then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Options.GetBrightness
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetBrightness(): Int32;

Returns the mainscreen brightness
*)
function TRSOptions.GetBrightness(): Int32;
var
  x,y:Int32;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if not(FindColorTolerance(x,y, 9584920, range, 35)) then
    Exit(-1);
  Result := Round((x - range.x1)/(range.x2-range.x1+1)*3);
end;


(*
Options.SetBrightness
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;

Sets the mainscreen brightness
*)
function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  spacing:Int32=31;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) or not(InRange(level, 0,3)) then
    Exit(False);

  if (self.GetBrightness() = level) then
    Exit(True);

  with range do
    Mouse.Click(TBox([x1+spacing*level,y1,x1+spacing*level+12,y2]), mouse_left);

  t := GetTickCount64()+tryTime;
  repeat
    if self.GetBrightness() = level then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Options.GetZoom
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetZoom(): Int32;

Returns the mainscreen zoom level 0..100.
*)
function TRSOptions.GetZoom: Int32;
var
  Area: TBox;
  TPA: TPointArray;
begin
  Area := [608, 268, 704, 277];

  if (not Self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if (not FindColors(TPA, 2106152, Area.Expand(10))) then
    Exit(-1);

  Result := Round((TPA.Mean().X - Area.X1) * 100 / (Area.Width - 1));
end;

(*
Options.SetZoom
~~~~~~~~~~~~~~~
.. pascal:: procedure TRSOptions.SetZoom(Level: Int32);

Sets the mainscreen zoom level by scrolling, accurate to within 3 levels.
*)
procedure TRSOptions.SetZoom(Level: Int32);
var
  Delta, Scrolls: Int32;
begin
  if not (Level in [0..100]) then
    srl.WriteLn('TRSOptions.SetZoom: Zoom level out of range, expected `0..100`', dtFatal);

  Delta := Options.GetZoom() - Level;

  while Abs(Delta) > 3 do
  begin
    if (not Mouse.GetPosition().InBox(MainScreen.GetBounds())) then
      Mouse.Move(MainScreen.GetBounds());

    if Abs(Delta) <= Random(6, 12) then
      Scrolls := 1
    else
      Scrolls := Random(1, 4);

    Mouse.Scroll(Scrolls, Delta > 0);

    Delta := Options.GetZoom() - Level;
  end;
end;

(*
type ERSZoomNotch
~~~~~~~~~~~~~~~~~
  Zoom level notches.

  ZOOM_LEVEL_0 = Zoomed out fully.
  ZOOM_LEVEL_50 = Default.
  ZOOM_LEVEL_100 = Zoomed in fully.
*)
type
  ERSZoomNotch = (ZOOM_NOTCH_UNKNOWN, ZOOM_NOTCH_0, ZOOM_NOTCH_25, ZOOM_NOTCH_50, ZOOM_NOTCH_75, ZOOM_NOTCH_100);

const
  ZOOM_NOTCH_DEFAULT = ZOOM_NOTCH_50;

(*
Options.GetZoomNotch
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetZoomNotch: ERSZoomNotch;

Returns the current zoom notch. ZOOM_NOTCH_UNKNOWN if not either 0,25,50,75,100.
*)
function TRSOptions.GetZoomNotch: ERSZoomNotch;
begin
  case Self.GetZoom() of
    100: Result := ZOOM_NOTCH_100;
    75:  Result := ZOOM_NOTCH_75;
    50:  Result := ZOOM_NOTCH_50;
    20:  Result := ZOOM_NOTCH_25;
    0:   Result := ZOOM_NOTCH_0;
  end;
end;

(*
Options.SetZoomNotch
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoomNotch(Notch: ERSZoomNotch; Randomness: Int32 = 0): Boolean;

Moves the zoom bar slider to the `Notch` position.
`Randomness` is the random +- we add to the coord of the notch position.
*)
function TRSOptions.SetZoomNotch(Notch: ERSZoomNotch; Randomness: Int32 = 0): Boolean;

  function GetNotchPoint(Notch: ERSZoomNotch): TPoint;
  begin
    case Notch of
      ZOOM_NOTCH_0: Result := [604, 273];
      ZOOM_NOTCH_25: Result := [628, 273];
      ZOOM_NOTCH_50: Result := [657, 273];
      ZOOM_NOTCH_75: Result := [681, 273];
      ZOOM_NOTCH_100: Result := [707, 273];
    end;

    Result.Y += Random(-3, 3);
  end;

var
  Bounds: TBox;
  TPA: TPointArray;
  T: UInt64;
  P: TPoint;
begin
  Bounds := [608, 268, 704, 277];

  if (Self.GetZoomNotch() = Notch) then
    Exit(True);

  if (not Self.SetCurrentTab(optDisplay)) then
    Exit(False);
  if (not FindColors(TPA, 2106152, Bounds.Expand(10))) then
    Exit(False);

  if Distance(GetNotchPoint(Notch), TPA.Mean()) <= 10 then
  begin
    Wait(0, 2500, wdLeft);

    P := [Random(Bounds.X1, Bounds.X2), Random(Bounds.Y1, Bounds.Y2)];
    while Distance(P, TPA.Mean()) <= 10 do
      P := [Random(Bounds.X1, Bounds.X2), Random(Bounds.Y1, Bounds.Y2)];

    Mouse.Click(P, MOUSE_LEFT);
  end;

  P := GetNotchPoint(Notch);
  if Randomness > 0 then
    P.X += Random(-Randomness, Randomness);

  Mouse.Click(P, MOUSE_LEFT);

  if Randomness = 0 then
  begin
    T := GetTickCount() + 1500;

    while (T > GetTickCount()) do
    begin
      if Self.GetZoomNotch() = Notch then
        Exit(True);

      Wait(50, 100);
    end;
  end else
    Exit(True);
end;

(*
Options.ToggleAcceptAid
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [555,425,590,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;

(*
Options.ToggleRun
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [600,425,635,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.ToggleChatEffects
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,268,602,305], optChat, enable, tryTime);
end;

(*
Options.ToggleSplitPrivChat
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([625,268,658,305], optChat, enable, tryTime);
end;


(*
Options.ToggleProfanityFilter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,322,603,358], optChat, enable, tryTime);
end;

(*
Options.ToggleTimeoutNotice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Login/Logout notification timeout" to the given state.
*)
function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([680,322,716,358], optChat, enable, tryTime);
end;

(*
Options.ToggleShiftDrop
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Shift Drop" to the given state.
*)
function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([624,299,659,334], optControls, enable, tryTime);
end;


begin
  Options.__setup();
end;
