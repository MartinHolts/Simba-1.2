(*
Logout
=======
The file holds functions and procedures that are in the logout-tab.
*)

(*
type TRSLogoutWS
~~~~~~~~~~~~~~~~
Type that holds the methods for the in-game worldswitcher located on the logout tab
*)
type
  PRSLogout = ^TRSLogout;
  TRSLogoutWS = record
    FTab: PRSLogout;
  end;

(*
type TRSLogout
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape logout-tab.
*)
  ELogoutSubTab = (lsTabNone, lsTabLogout, lsTabWorldSelect);

  TRSLogout = record(TInterfaceBase)
    btnLogout: TBox;
    WorldSwitcher: TRSLogoutWS;
  end;

{==| Table of Contents |=======================
 procedure TRSLogout.__setup();
 function TRSLogout.Open(): Boolean;
 function TRSLogout.IsOpen(): Boolean;
 function TRSLogout.ClickLogout(attempts:Int32=3; tryTime:Int32=20000): Boolean;
}

(*
var Logout
~~~~~~~~~~
Variable that stores functions and properties of the Runescape logout interface.
*)
var 
  Logout: TRSLogout;
  
{$IFNDEF CODEINSIGHT}
procedure TRSLogout.__Setup();
begin
  with Self do
  begin
    FName := 'Logout';
    FStatic := True;
    FBounds := [550,206,733,464];

    btnLogout  := [575,420,708,445];

    WorldSwitcher.FTab := PRSLogout(@Self);
  end;
end;
{$ENDIF}

(*
Logout.Open
~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.Open(): Boolean;

Opens the interface
*)
function TRSLogout.Open(): Boolean;
begin
  Result := Gametabs.Open(tabLogout);
end;

(*
Logout.IsOpen
~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.IsOpen(Tab:ELogoutSubtab=lsTabNone; maxWait:Int32=0): Boolean;

Checks if the interface is already open. Can also be used to check if a specific "subtab" is open.
*)
function TRSLogout.IsOpen(Tab: ELogoutSubtab = lsTabNone; maxWait: Int32 = 0): Boolean;
begin
  Result := Gametabs.IsOpen(tabLogout, maxWait);
  if (Result) and (Tab <> lsTabNone) then
    case Tab of
      lsTabWorldSelect: Result := WorldSwitcher.isOpen();
      lsTabLogout: Result := True;
    end;
end;

(*
Logout.ClickLogout
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;

Clicks the logout button, by default retires 3 times over 20 seconds.
*)
function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;
var 
  t,seed:UInt64;
begin
  if (not Self.Open()) then
    Exit(False);
  if (WorldSwitcher.isOpen()) then
    WorldSwitcher.Close();
  
  seed := 3153;
  Inc(tryTime, attemts * seed div 2);
  for 1 to attemts do
  begin
    mouse.click(Self.BtnLogout, mouse_left);
    t := GetTickCount64() + (tryTime div attemts);
    repeat
      if (CountColorTolerance(1777019, Self.BtnLogout, 30) < 100) then
        Exit(True)
      else
        Wait(25);
    until GetTickCount64() > t;
    Wait(0,seed);
  end;
end;

(*
Logout.SwitchToWorld
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.SwitchToWorld(World: Integer): Boolean;

Jumps to the given world.
*)
function TRSLogout.SwitchToWorld(World: Integer): Boolean;
begin
  Result := Self.WorldSwitcher.SwitchTo(World);
end;

(*
Logout.WorldSwitcher.isOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.isOpen(WaitTime: Integer = 0): Boolean;

Returns if the in-game worldswitcher is open
*)
function TRSLogoutWS.isOpen(WaitTime: Integer = 0): Boolean;
var
  t: UInt64;
  p: TPoint;
begin
  if (not FTab^.Open()) then
    Exit(False);

  if (WaitTime = 0) then
    Exit(srl.FindText(p, 'Current world', 'UpChars07_s', FTab^.GetBounds()));

  t := GetTickCount64() + WaitTime;
  repeat
    if (srl.FindText(p, 'Current world', 'UpChars07_s', FTab^.GetBounds())) then
      Exit(True);

    Wait(Random(50, 100));
  until (GetTickCount64() >= t);
end;

(*
Logout.WorldSwitcher.Open
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.Open: Boolean;

Opens the in-game worldswitcher
*)
function TRSLogoutWS.Open: Boolean;
begin
  if (not FTab^.Open()) then
    Exit(False);
  if (Self.isOpen()) then
    Exit(True);

  Mouse.Click(Box(575, 348, 708, 373), mouse_Left);
  Result := Self.isOpen(Random(4000, 5000));
end;

(*
Logout.WorldSwitcher.Close
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.Close: Boolean;

Closes the worldswitcher (returns back to the logout button)
*)
function TRSLogoutWS.Close: Boolean;
var
  t: UInt64;
begin
  if (not Self.isOpen()) then
    Exit(True);
  Mouse.Click(Box(715, 206, 735, 226), mouse_Left);

  t := GetTickCount64() + Random(4000, 5000);
  while (t > GetTickCount64()) do
    if (not Self.isOpen()) then
      Exit(True)
    else
      Wait(Random(50, 100));
end;

(*
Logout.WorldSwitcher.VisibleWorlds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.VisibleWorlds(out Worlds: TIntegerArray; out Boxes: TBoxArray): Boolean;

Returns the VisibleWorlds and their bounds
*)
function TRSLogoutWS.VisibleWorlds(out Worlds: TIntegerArray; out Boxes: TBoxArray): Boolean;
const
  WORLD_BOX: TBox = [563, 228, 587, 450]; // box where the world numbers are
  WORLD_COLORS = [14737632, 61680, 8355711]; // (P2P) (F2P) (Skill worlds)
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
  i, j: Integer;
  Text: String;
begin
  if (not FindColors(TPA, 0, WORLD_BOX)) then
    Exit(False);

  ATPA := ClusterTPAEx(TPA, 20, 2); // Get bounds of each world number
  for i := 0 to High(ATPA) do
  begin
    b := GetTPABounds(ATPA[i]).Expand(2);

    for j:=0 to High(WORLD_COLORS) do
    begin
      Text := GetTextAtEx(b, 0, 3, 0, WORLD_COLORS[j], 0, 'SmallChars07');
      if (Text <> '') then
      begin
        Worlds := Worlds + StrToIntDef(Text, -1);
        Boxes := Boxes + Box(b.X1 - 15, b.Y1, b.X2 + 130, b.Y2);
        Continue;
      end;
    end;
  end;

  Result := Length(Worlds) > 0;
end;

(*
Logout.WorldSwitcher.CurrentWorld
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.CurrentWorld: Integer;

Returns the world we are currently in
*)
function TRSLogoutWS.CurrentWorld: Integer;
var
  t: UInt64;
  Text: String;
begin
  if (not Self.Open()) then
    Exit(-1);

  t := GetTickCount64() + Random(3000, 4000);
  while (t > GetTickCount64()) do
  begin
    Text := GetTextAtEx(Box(556, 206, 714, 226), 0, 3, 3, 2070783, 0, 'UpChars07_s');
    if (Pos('Current world', Text) > 0) then
      Exit(StrToIntDef(ExtractFromStr(Text, Numbers), -1));
    Wait(Random(50, 100));
  end;

  // Didnt find anything
  Result := -1;
end;

(*
Logout.WorldSwitcher.SwitchTo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.SwitchTo(World: Integer): Boolean;

Hops to the given world
*)
function TRSLogoutWS.SwitchTo(World: Integer): Boolean;

  // 302 to 2
  function ShortWorld(wo: Integer): Integer;
  var
    s: String;
  begin
    s := IntToStr(wo);
    if (Length(s) = 3) then
    begin
      s := Copy(s, 2, 2);
      if (s[1] = '0') then
        s := s[Length(s)];
    end;
    Exit(StrToInt(s));
  end;

  procedure ScrollList(var Down: Boolean);
  begin
    if (Down) and (GetColor(731, 416) = 65536) then
      Down := False;
    if (not Down) and (GetColor(731, 245) = 65536) then
      Down := True;

    Mouse.Scroll(Box(722, 246, 735, 415), Random(3, 5), Down);
  end;

  function ClickWorld(Self:TRSLogoutWS; World: Integer): Boolean;
  var
    i: Integer;
    t: UInt64;
    Down: Boolean;
    Worlds: TIntegerArray;
    Boxes: TBoxArray;
  begin
    Down := Random(2) = 0;

    t := GetTickCount64() + Random(13000, 15000);
    while (t > GetTickCount64()) do
    begin
      SetLength(Worlds, 0);
      SetLength(Boxes, 0);

      if (Self.VisibleWorlds(Worlds, Boxes)) then
        for i := 0 to High(Worlds) do
          if (Worlds[i] = World) then
          begin
            Mouse.Click(Boxes[i], mouse_Left);
            Exit(True);
          end;

      ScrollList(Down);
      Wait(Random(90, 350));
    end;
  end;

begin
  if (not Self.Open()) then
    Exit(False);
  if (CurrentWorld = World) then
    Exit(True);
  if (not ClickWorld(Self, ShortWorld(World))) then
    Exit(False);

  Chatbox.ClickOption(['Yes. In', 'Yes.'], Random(2000, 2500));
  if (srl.isClientLoading(Random(1500, 2000))) then
    srl.WaitClientLoading();

  Result := srl.isLoggedIn();
end;

begin
  Logout.__Setup();
end;
